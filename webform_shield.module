<?php

/**
 * @file
 * Implements the webform_shield module with enhanced security and AJAX support.
 */

use Drupal\Component\Utility\Crypt;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Site\Settings;
use Drupal\webform_shield\WebformShieldFormAlter;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function webform_shield_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.webform_shield':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Prevent form spam with encrypted dynamic keys and configurable timeouts') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function webform_shield_theme($existing, $type, $theme, $path) {
  return [
    'webform_shield_no_js' => [
      'template'  => 'webform-shield-no-js',
      'variables' => [
        'message' => NULL,
      ],
      'path' => $path . '/templates',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function webform_shield_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('webform_shield.settings');
  $current_user = \Drupal::currentUser();
  
  // Initialize cache metadata
  $cache_metadata = CacheableMetadata::createFromRenderArray($form);
  $cache_metadata->addCacheableDependency($config);
  
  // Add session context since we validate against session IDs
  $cache_metadata->addCacheContexts(['user.permissions', 'session.exists']);
  
  $skip_shield = $current_user->hasPermission('skip webform shield');
  $protection = FALSE;
  $matching_pattern = NULL;

  // Get the configured active form IDs for webform shield.
  if ($form_ids = $config->get('form_ids')) {
    $excluded_form_ids = $config->get('excluded_form_ids') ?? [];

    // Check if this form is a match.
    $pathMatcher = \Drupal::service('path.matcher');
    $included = $pathMatcher->matchPath($form_id, implode("\n", $form_ids)) || $pathMatcher->matchPath($form['#id'], implode("\n", $form_ids));
    $excluded = $pathMatcher->matchPath($form_id, implode("\n", $excluded_form_ids)) || $pathMatcher->matchPath($form['#id'], implode("\n", $excluded_form_ids));

    $protection = $included && !$excluded;

    // Find which pattern matched and store it
    if ($protection) {
      foreach ($form_ids as $pattern) {
        if ($pathMatcher->matchPath($form_id, $pattern) || $pathMatcher->matchPath($form['#id'], $pattern)) {
          $matching_pattern = $pattern;
          break;
        }
      }
    }

    // Other modules can change the protection of this form.
    \Drupal::moduleHandler()->alter('webform_shield_form_status', $form_id, $protection);

    if ($protection) {
      // Enable protection for this form if user doesn't have skip permission.
      if (!$skip_shield) {
        // Pass the matching pattern to the protection function
        webform_shield_protect_form($form, $matching_pattern, $form_id);
        $protection = TRUE;
      }
    }
  }

  // Determine if we should display the form ID.
  if ($config->get('show_form_ids')) {
    // Check if the user has permission to view these messages.
    if ($current_user->hasPermission('administer webform shield configuration')) {
      // Set a message with the form ID and status.
      \Drupal::messenger()->addMessage(t('Webform Shield (:id): :status', [
        ':id' => $form_id,
        ':status' => $protection ? t('enabled') : t('disabled'),
      ]));
    }
  }

  // Apply cache metadata
  $cache_metadata->applyTo($form);
}

/**
 * Implements hook_page_attachments().
 */
function webform_shield_page_attachments(array &$page) {
  // Adds noscript style to HEAD.
  $noscript_style = [
    '#tag' => 'style',
    '#value' => 'form.webform-shield * :not(.webform-shield-message) { display: none !important; }',
    '#noscript' => TRUE,
  ];
  $page['#attached']['html_head'][] = [$noscript_style, 'webform_shield_style'];

  // Pass debug mode setting to JavaScript.
  $config = \Drupal::config('webform_shield.settings');
  $debug_mode = $config->get('debug_mode') ?: FALSE;
  $log_security_events = $config->get('log_security_events') !== FALSE;
  
  $page['#attached']['drupalSettings']['webformShield']['debugMode'] = $debug_mode;
  $page['#attached']['drupalSettings']['webformShield']['logSecurityEvents'] = $log_security_events;
  
  // Add debug information to page if debug mode is enabled
  if ($debug_mode && \Drupal::currentUser()->hasPermission('administer webform shield configuration')) {
    $page['#attached']['drupalSettings']['webformShield']['debugInfo'] = [
      'tokenTimeout' => $config->get('token_timeout') ?: 900,
      'checkIp' => $config->get('check_ip') !== FALSE,
      'rateLimitEnabled' => $config->get('rate_limit_enabled') !== FALSE,
      'rateLimitThreshold' => $config->get('rate_limit_threshold') ?: 100,
      'protectedForms' => $config->get('form_ids') ?: [],
      'excludedForms' => $config->get('excluded_form_ids') ?: [],
    ];
  }
}

/**
 * Helper function to enable Webform Shield protection for a given form.
 *
 * @param array &$form
 *   The form to enable Webform Shield protection on.
 * @param string|null $matching_pattern
 *   The configuration pattern that matched this form.
 * @param string $form_id
 *   The actual form ID for validation.
 */
function webform_shield_protect_form(array &$form, $matching_pattern = NULL, $form_id = NULL) {
  // Stop if the form is already protected.
  if (!empty($form['#webform_shield_protected'])) {
    return;
  }

  // Mark as protected (no token generation during form render!)
  $form['#webform_shield_protected'] = TRUE;

  // Store the matching pattern for JavaScript to use
  if ($matching_pattern) {
    $form['#webform_shield_pattern'] = $matching_pattern;
  }

  // Store the actual form ID for validation
  if ($form_id) {
    $form['#webform_shield_form_id'] = $form_id;
  }

  // Add placeholder for token (populated via AJAX only)
  $form['webform_shield_token'] = [
    '#type' => 'hidden',
    '#value' => '',
    '#attributes' => ['data-webform-shield-placeholder' => 'true'],
  ];

  // Provide a message in the event that the user does not have JavaScript.
  $form['webform_shield_no_js'] = [
    '#theme' => 'webform_shield_no_js',
    '#message' => t('You must have JavaScript enabled to use this form.'),
    '#weight' => -500,
  ];

  // Add a pre-render function.
  $form['#pre_render'][] = [WebformShieldFormAlter::class, 'preRender'];

  // Add validation for the token.
  $form['#validate'][] = 'webform_shield_form_validation';
}

/**
 * Validation callback for Webform Shield-enabled forms.
 */
function webform_shield_form_validation($form, FormStateInterface $form_state) {
  // Stop validation if the form was submitted programmatically.
  if ($form_state->isProgrammed()) {
    return;
  }

  // Get the user input.
  $input = $form_state->getUserInput();

  // Extract the submitted token.
  $submitted_token = $input['webform_shield_token'] ?? NULL;

  // Views exposed forms will initially load and submit without the token.
  if (($form['#form_id'] == 'views_exposed_form') && ($submitted_token === NULL)) {
    return;
  }

  // Check if the token is missing or invalid.
  if (!$submitted_token || !_webform_shield_validate_token($submitted_token, $form)) {
    // Always log security events for failed validations
    \Drupal::logger('webform_shield')->warning('Token validation failed: Form=@form, IP=@ip, User=@user, Token=@token', [
      '@form' => $form['#form_id'],
      '@ip' => \Drupal::request()->getClientIp(),
      '@user' => \Drupal::currentUser()->id(),
      '@token' => $submitted_token ? 'present' : 'missing',
    ]);
    
    $form_state->setErrorByName('', t('Submission failed. Please reload the page, ensure JavaScript is enabled and try again.'));
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Unset webform_shield_token from exposed_raw_input to remove it from pagers link.
 */
function webform_shield_views_pre_render(ViewExecutable $view) {
  if (isset($view->exposed_raw_input['webform_shield_token'])) {
    unset($view->exposed_raw_input['webform_shield_token']);
  }
}

/**
 * Implements hook_cron().
 *
 * Clean up expired tokens.
 */
function webform_shield_cron() {
  _webform_shield_cleanup_expired_tokens();
}

/**
 * Helper function to generate a token for a given form.
 * 
 * CRITICAL: This should ONLY be called from AJAX endpoint, never during form render!
 */
function _webform_shield_generate_token($form_identifier): string {
  $config = \Drupal::config('webform_shield.settings');
  $debug_mode = $config->get('debug_mode') ?: FALSE;
  $timeout = $config->get('token_timeout') ?: 900; // Default 15 minutes
  
  $timestamp = \Drupal::time()->getRequestTime();
  $expiry = $timestamp + $timeout;
  
  // Create a unique token ID with enhanced entropy
  $token_id = Crypt::randomBytesBase64(32);
  
  // Get current session information
  $session_id = session_id() ?: 'anonymous';
  $user_id = \Drupal::currentUser()->id();
  $client_ip = \Drupal::request()->getClientIp();
  $user_agent = \Drupal::request()->headers->get('User-Agent', '');
  
  // Create token data with enhanced security information
  $token_data = [
    'form_identifier' => $form_identifier, // Store the identifier used for generation (could be pattern or literal ID)
    'timestamp' => $timestamp,
    'expiry' => $expiry,
    'session_id' => $session_id,
    'user_id' => $user_id,
    'client_ip' => $client_ip,
    'user_agent_hash' => hash('sha256', $user_agent),
    'site_salt' => Settings::getHashSalt(),
  ];
  
  // Debug logging for token generation (only in debug mode)
  if ($debug_mode) {
    \Drupal::logger('webform_shield')->debug('Token generation debug: Identifier=@identifier, TokenID=@token_id, Timeout=@timeout, SessionID=@session, UserAgent=@ua', [
      '@identifier' => $form_identifier,
      '@token_id' => substr($token_id, 0, 8) . '...',
      '@timeout' => $timeout,
      '@session' => substr($session_id, 0, 8) . '...',
      '@ua' => substr($user_agent, 0, 100),
    ]);
  }
  
  // Store token data in cache with enhanced metadata
  $cache = \Drupal::cache();
  $cache->set('webform_shield:' . $token_id, $token_data, $expiry, ['webform_shield_token']);
  
  // Log token generation for audit trail (only in debug mode)
  if ($debug_mode) {
    \Drupal::logger('webform_shield')->info('Token generated: Identifier=@identifier, User=@user, IP=@ip, Expiry=@expiry', [
      '@identifier' => $form_identifier,
      '@user' => $user_id,
      '@ip' => $client_ip,
      '@expiry' => date('Y-m-d H:i:s', $expiry),
    ]);
  }
  
  // Return the token ID.
  return $token_id;
}

/**
 * Helper function to validate a token with enhanced security checks and pattern matching.
 */
function _webform_shield_validate_token($token_id, $form): bool {
  $config = \Drupal::config('webform_shield.settings');
  $debug_mode = $config->get('debug_mode') ?: FALSE;
  
  try {
    $form_id = $form['#form_id'];
    $pattern = $form['#webform_shield_pattern'] ?? NULL;
    $stored_form_id = $form['#webform_shield_form_id'] ?? NULL;
    
    // Debug logging for token validation start (only in debug mode)
    if ($debug_mode) {
      \Drupal::logger('webform_shield')->debug('Token validation debug: Starting validation for Form=@form, Pattern=@pattern, TokenID=@token_id', [
        '@form' => $form_id,
        '@pattern' => $pattern,
        '@token_id' => substr($token_id, 0, 8) . '...',
      ]);
    }
    
    // Retrieve token data from cache.
    $cache = \Drupal::cache();
    $cached_data = $cache->get('webform_shield:' . $token_id);
    
    if (!$cached_data || !$cached_data->data) {
      if ($debug_mode) {
        \Drupal::logger('webform_shield')->debug('Token validation debug: Token not found in cache');
      }
      return FALSE;
    }
    
    $token_data = $cached_data->data;
    $current_time = \Drupal::time()->getRequestTime();
    $current_user = \Drupal::currentUser();
    $request = \Drupal::request();
    
    // Debug logging for token data (only in debug mode)
    if ($debug_mode) {
      \Drupal::logger('webform_shield')->debug('Token validation debug: Token data retrieved, validating fields...');
    }
    
    // Validate token data with pattern matching support
    $form_identifier_from_token = $token_data['form_identifier'] ?? $token_data['form_pattern'] ?? $token_data['form_id'] ?? NULL;
    
    // Check if the token was generated for the correct form pattern
    $pathMatcher = \Drupal::service('path.matcher');
    $pattern_matches = FALSE;
    
    if ($form_identifier_from_token) {
      // Check if the current form ID matches the pattern the token was generated for
      if ($form_identifier_from_token === $form_id || 
          $form_identifier_from_token === $pattern ||
          $form_identifier_from_token === $stored_form_id ||
          $pathMatcher->matchPath($form_id, $form_identifier_from_token) ||
          ($pattern && $pathMatcher->matchPath($pattern, $form_identifier_from_token)) ||
          ($stored_form_id && $pathMatcher->matchPath($stored_form_id, $form_identifier_from_token))) {
        $pattern_matches = TRUE;
      }
    }
    
    if (!$pattern_matches) {
      if ($debug_mode) {
        \Drupal::logger('webform_shield')->debug('Token validation debug: Form pattern mismatch - Token identifier=@token_identifier, Form ID=@form_id, Pattern=@pattern', [
          '@token_identifier' => $form_identifier_from_token,
          '@form_id' => $form_id,
          '@pattern' => $pattern,
        ]);
      }
      return FALSE;
    }
    
    if ($token_data['expiry'] < $current_time) {
      if ($debug_mode) {
        \Drupal::logger('webform_shield')->debug('Token validation debug: Token expired - Expiry=@expiry, Current=@current', [
          '@expiry' => date('Y-m-d H:i:s', $token_data['expiry']),
          '@current' => date('Y-m-d H:i:s', $current_time),
        ]);
      }
      // Token expired, clean it up.
      $cache->delete('webform_shield:' . $token_id);
      return FALSE;
    }
    
    // Enhanced security validations
    
    // Check session ID (only during validation).
    $current_session = session_id() ?: 'anonymous';
    if ($token_data['session_id'] !== $current_session) {
      if ($debug_mode) {
        \Drupal::logger('webform_shield')->debug('Token validation debug: Session ID mismatch');
      }
      return FALSE;
    }
    
    // Check user ID consistency
    if ($token_data['user_id'] !== $current_user->id()) {
      if ($debug_mode) {
        \Drupal::logger('webform_shield')->debug('Token validation debug: User ID mismatch - Expected=@expected, Got=@got', [
          '@expected' => $current_user->id(),
          '@got' => $token_data['user_id'],
        ]);
      }
      return FALSE;
    }
    
    // Check client IP (optional - can be disabled for users behind proxies)
    $check_ip = $config->get('check_ip') !== FALSE;
    if ($check_ip && $token_data['client_ip'] !== $request->getClientIp()) {
      if ($debug_mode) {
        \Drupal::logger('webform_shield')->debug('Token validation debug: IP address mismatch - Expected=@expected, Got=@got', [
          '@expected' => $request->getClientIp(),
          '@got' => $token_data['client_ip'],
        ]);
      }
      return FALSE;
    }
    
    // Check user agent hash (prevents token hijacking)
    $current_ua_hash = hash('sha256', $request->headers->get('User-Agent', ''));
    if ($token_data['user_agent_hash'] !== $current_ua_hash) {
      if ($debug_mode) {
        \Drupal::logger('webform_shield')->debug('Token validation debug: User agent hash mismatch');
      }
      return FALSE;
    }
    
    // Validate site salt (prevents tokens from other sites)
    if ($token_data['site_salt'] !== Settings::getHashSalt()) {
      if ($debug_mode) {
        \Drupal::logger('webform_shield')->debug('Token validation debug: Site salt mismatch');
      }
      return FALSE;
    }
    
    // Debug logging for successful validation (only in debug mode)
    if ($debug_mode) {
      \Drupal::logger('webform_shield')->debug('Token validation debug: All validations passed, token is valid');
    }
    
    // Token is valid, remove it to prevent reuse (one-time use).
    $cache->delete('webform_shield:' . $token_id);
    
    // Log successful validation (only in debug mode)
    if ($debug_mode) {
      \Drupal::logger('webform_shield')->info('Token validated successfully: Form=@form, Identifier=@identifier, User=@user, IP=@ip', [
        '@form' => $form_id,
        '@identifier' => $form_identifier_from_token,
        '@user' => $current_user->id(),
        '@ip' => $request->getClientIp(),
      ]);
    }
    
    return TRUE;
  }
  catch (\Exception $e) {
    // Always log errors regardless of debug mode
    \Drupal::logger('webform_shield')->error('Token validation error: @message | Form=@form, Token=@token', [
      '@message' => $e->getMessage(),
      '@form' => $form['#form_id'] ?? 'unknown',
      '@token' => substr($token_id, 0, 8) . '...',
    ]);
    
    if ($debug_mode) {
      \Drupal::logger('webform_shield')->debug('Token validation debug: Exception occurred - @message | @trace', [
        '@message' => $e->getMessage(),
        '@trace' => $e->getTraceAsString(),
      ]);
    }
    
    return FALSE;
  }
}

/**
 * Helper function to clean up expired tokens.
 */
function _webform_shield_cleanup_expired_tokens() {
  // This is handled automatically by Drupal's cache system when tokens expire.
  // Additional cleanup could be implemented here if needed.
  
  // Clear any cache tags for expired tokens
  \Drupal::service('cache_tags.invalidator')->invalidateTags(['webform_shield_token']);
  
  // Log cleanup activity (only in debug mode)
  $config = \Drupal::config('webform_shield.settings');
  $debug_mode = $config->get('debug_mode') ?: FALSE;
  if ($debug_mode) {
    \Drupal::logger('webform_shield')->info('Token cleanup completed via cron');
  }
}